package com.pl.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import com.pl.projectfiles.*;

public class ProductDBManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addMangaStmt;
	private PreparedStatement getMangaStmt;
	private PreparedStatement deleteAllMangaStmt;
	private PreparedStatement searchMangaByTitleStmt;
	private PreparedStatement searchMangaByMangaTypeStmt;
	private PreparedStatement deleteMangaStmt;

	
	public ProductDBManager() {
		
		Properties props = new Properties();
		try {
			
			try {	
				props.load(ClassLoader.getSystemResourceAsStream("jdbc.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}		

		
			conn = DriverManager.getConnection(props.getProperty("url"));
			stmt = conn.createStatement();
			boolean mangaTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while(rs.next()) {
				if("manga".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					mangaTableExists = true;
					break;
				}
			}


			if(!mangaTableExists) {
				stmt.executeUpdate("" +
						"CREATE TABLE product(" +
						"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
						"title varchar(36)," +
						"price int," +
						"mangatype varchar(36)" +
						")");
			}

			addMangaStmt = conn.prepareStatement("" +
					"INSERT INTO mangproducta (title, price) VALUES (?, ?)" +
					"");

			getMangaStmt = conn.prepareStatement("" +
					"SELECT * FROM manga" +
					"");

			deleteAllMangaStmt = conn.prepareStatement("" +
					"DELETE FROM manga" +
					"");

			searchMangaByTitleStmt = conn.prepareStatement("" +
					"SELECT id FROM manga WHERE title = ?" +
					"");

			searchMangaByMangaTypeStmt = conn.prepareStatement("" +
					"SELECT id FROM manga WHERE mangatype = ?" +
					"");

			deleteMangaStmt = conn.prepareStatement("" +
					"DELETE FROM manga WHERE id = ?" +
					"");
			


		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return conn;
	}		
	
	public void addManga(Product manga) {
		try {
			addMangaStmt.setString(1, manga.getTitle());
			addMangaStmt.setInt(2, manga.getPrice());
		
			addMangaStmt.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Product> getAllMangas() {
		List<Product> mangas = new ArrayList<Product>();

		try {
			ResultSet rs = getMangaStmt.executeQuery();

			while(rs.next()) {
				
				if(rs.getString("mangatype").equalsIgnoreCase("mystery"))
					mangas.add(new Product(rs.getString("title"), rs.getInt("price")));
				else if(rs.getString("mangatype").equalsIgnoreCase("action"))
					mangas.add(new Product(rs.getString("title"), rs.getInt("price")));
				else if(rs.getString("mangatype").equalsIgnoreCase("shounen"))
					mangas.add(new Product(rs.getString("title"), rs.getInt("price")));
				
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return mangas;
	}
	
	public void deleteAllMangas() {
		try {
			deleteAllMangaStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> searchMangaByTitle (String title)
	{
		try {
			List<Integer> result = new ArrayList<Integer>();
			searchMangaByTitleStmt.setString(1, title);
			
			ResultSet rs = searchMangaByTitleStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}


	
	public void deleteManga(List<Integer> list)
	{
		try {
			for (Integer id : list) {
				deleteMangaStmt.setInt(1, id);
				deleteMangaStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	public void printMangaWithCondition(List<Product> listManga, Condition condition) {
		for (Product manga : listManga) {
			if (condition.getCondition(manga)) {
				System.out.println("Title: " + manga.getTitle() + "\tMangaType: "
							
								+ manga.getPrice());
			}
		}
	}

}